// Fentrix Stock Bot - Fixed Version
const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const express = require('express');

console.log('üöÄ FENTRIX STOCK BOT - RAILWAY CLOUD DEPLOYMENT');
console.log('üìà Starting bot initialization...');
console.log('üåê Powered by Fentrix.Ai');

// Environment configuration for production
const config = require('./config');

// Create Express app for health checks FIRST
const app = express();
const PORT = config.PORT || 3000;

// Global variable to store current QR code
let currentQRCode = null;

// Simple health check that doesn't depend on other services
app.get('/health', (req, res) => {
  res.status(200).json({
    status: 'healthy',
    bot: config.BOT_NAME,
    version: config.BOT_VERSION,
    uptime: process.uptime(),
    timestamp: new Date().toISOString(),
    railway: 'operational'
  });
});

// Root endpoint
app.get('/', (req, res) => {
  res.json({
    bot: config.BOT_NAME,
    description: config.BOT_DESCRIPTION,
    version: config.BOT_VERSION,
    author: config.BOT_AUTHOR,
    status: 'running',
    uptime: process.uptime(),
    timestamp: new Date().toISOString(),
    features: {
      stockPrices: true,
      cryptoPrices: true,
      sentimentAnalysis: true,
      priceAlerts: true,
      liveMonitoring: true
    },
    endpoints: {
      health: '/health',
      testStock: '/api/stock/:symbol',
      testCrypto: '/api/crypto/:coin'
    }
  });
});

// API endpoint for testing stock prices without WhatsApp
app.get('/api/stock/:symbol', async (req, res) => {
  try {
    const symbol = req.params.symbol.toUpperCase();
    console.log(`üìà API request for stock: ${symbol}`);
    
    if (!stockService) {
      return res.status(503).json({ error: 'Stock service not available' });
    }
    
    const stockData = await stockService.getStockPrice(symbol);
    console.log(`‚úÖ Stock data retrieved for ${symbol}`);
    
    res.json({
      success: true,
      symbol: symbol,
      data: stockData,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error(`‚ùå Stock API error for ${req.params.symbol}:`, error.message);
    res.status(400).json({
      success: false,
      error: error.message,
      symbol: req.params.symbol
    });
  }
});

// API endpoint for testing crypto prices without WhatsApp
app.get('/api/crypto/:coin', async (req, res) => {
  try {
    const coin = req.params.coin.toLowerCase();
    console.log(`ü™ô API request for crypto: ${coin}`);
    
    if (!stockService) {
      return res.status(503).json({ error: 'Crypto service not available' });
    }
    
    const cryptoData = await stockService.getCryptoPrice(coin);
    console.log(`‚úÖ Crypto data retrieved for ${coin}`);
    
    res.json({
      success: true,
      coin: coin,
      data: cryptoData,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error(`‚ùå Crypto API error for ${req.params.coin}:`, error.message);
    res.status(400).json({
      success: false,
      error: error.message,
      coin: req.params.coin
    });
  }
});

// Add QR code web endpoint
app.get('/qr', (req, res) => {
  if (!currentQRCode) {
    res.send(`
      <html>
        <head><title>Fentrix Stock Bot - QR Code</title></head>
        <body style="font-family: Arial; text-align: center; padding: 50px;">
          <h1>ü§ñ Fentrix Stock Bot</h1>
          <p>‚ùå No QR code available yet.</p>
          <p>üîÑ The bot is still initializing...</p>
          <p>üì± Refresh this page in a few seconds.</p>
          <button onclick="location.reload()">üîÑ Refresh</button>
          <script>
            // Auto-refresh every 5 seconds until QR code is available
            setTimeout(() => location.reload(), 5000);
          </script>
        </body>
      </html>
    `);
    return;
  }
  
  // Escape the QR code data properly for HTML
  const escapedQRCode = currentQRCode.replace(/'/g, "\\'").replace(/"/g, '\\"');
  
  res.send(`
    <html>
      <head>
        <title>Fentrix Stock Bot - QR Code</title>
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <style>
          body { 
            font-family: Arial, sans-serif; 
            text-align: center; 
            padding: 20px; 
            background: #f0f0f0; 
            margin: 0;
          }
          .container { 
            max-width: 800px; 
            margin: 0 auto; 
          }
          .qr-container { 
            background: white; 
            padding: 30px; 
            border-radius: 15px; 
            display: inline-block; 
            margin: 20px; 
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
          }
          .instructions { 
            max-width: 600px; 
            margin: 0 auto; 
            text-align: left; 
            background: white; 
            padding: 20px; 
            border-radius: 10px; 
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
          }
          button {
            background: #007bff;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            font-size: 16px;
            cursor: pointer;
            margin: 10px;
          }
          button:hover {
            background: #0056b3;
          }
          .debug {
            background: #f8f9fa;
            padding: 10px;
            border-radius: 5px;
            margin: 10px 0;
            font-family: monospace;
            font-size: 12px;
            text-align: left;
          }
        </style>
      </head>
      <body>
        <div class="container">
          <h1>üì± Fentrix Stock Bot - WhatsApp QR Code</h1>
          
          <div class="qr-container">
            <div id="qrcode-canvas"></div>
            <div id="qrcode-fallback" style="display: none;">
              <p>üîÑ Loading QR Code...</p>
              <div class="debug">
                <strong>Debug Info:</strong><br>
                QR Code Length: ${currentQRCode.length} characters<br>
                First 50 chars: ${currentQRCode.substring(0, 50)}...
              </div>
            </div>
          </div>
          
          <div class="instructions">
            <h3>üìã Instructions:</h3>
            <ol>
              <li><strong>Open WhatsApp</strong> on your dedicated bot phone</li>
              <li><strong>Go to Settings</strong> ‚Üí <strong>Linked Devices</strong></li>
              <li><strong>Tap "Link a Device"</strong></li>
              <li><strong>Scan the QR code above</strong></li>
              <li><strong>Bot will connect</strong> and be ready to use!</li>
            </ol>
            
            <p><strong>‚ö†Ô∏è Important:</strong> Use a separate WhatsApp account for the bot, not your personal account!</p>
          </div>
          
          <button onclick="location.reload()">üîÑ Refresh QR Code</button>
          <button onclick="toggleDebug()">üîß Toggle Debug Info</button>
        </div>
        
        <!-- Multiple QR code libraries for better compatibility -->
        <script src="https://cdn.jsdelivr.net/npm/qrcode@1.5.3/build/qrcode.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/qrious/4.0.2/qrious.min.js"></script>
        
        <script>
          console.log('QR Code page loaded');
          console.log('QR Code data length:', '${currentQRCode.length}');
          
          let qrCodeData = '${escapedQRCode}';
          console.log('QR Code data (first 100 chars):', qrCodeData.substring(0, 100));
          
          function toggleDebug() {
            const debug = document.getElementById('qrcode-fallback');
            debug.style.display = debug.style.display === 'none' ? 'block' : 'none';
          }
          
          // Try multiple methods to render QR code
          function renderQRCode() {
            const container = document.getElementById('qrcode-canvas');
            
            // Method 1: Try qrcode.js with canvas
            if (typeof QRCode !== 'undefined') {
              console.log('Trying QRCode.js...');
              try {
                // Clear container
                container.innerHTML = '<canvas id="qr-canvas"></canvas>';
                
                QRCode.toCanvas(document.getElementById('qr-canvas'), qrCodeData, {
                  width: 350,
                  height: 350,
                  margin: 3,
                  color: {
                    dark: '#000000',
                    light: '#FFFFFF'
                  },
                  errorCorrectionLevel: 'M'
                }, function (error) {
                  if (error) {
                    console.error('QRCode.js canvas error:', error);
                    tryMethod2();
                  } else {
                    console.log('‚úÖ QRCode.js canvas success!');
                  }
                });
                return;
              } catch (error) {
                console.error('QRCode.js canvas failed:', error);
              }
            }
            
            tryMethod2();
          }
          
          // Method 2: Try qrcode.js with SVG
          function tryMethod2() {
            console.log('Trying QRCode.js SVG...');
            const container = document.getElementById('qrcode-canvas');
            
            if (typeof QRCode !== 'undefined') {
              try {
                QRCode.toString(qrCodeData, {
                  type: 'svg',
                  width: 350,
                  margin: 3,
                  color: {
                    dark: '#000000',
                    light: '#FFFFFF'
                  }
                }, function (error, string) {
                  if (error) {
                    console.error('QRCode.js SVG error:', error);
                    tryMethod3();
                  } else {
                    container.innerHTML = string;
                    console.log('‚úÖ QRCode.js SVG success!');
                  }
                });
                return;
              } catch (error) {
                console.error('QRCode.js SVG failed:', error);
              }
            }
            
            tryMethod3();
          }
          
          // Method 3: Try QRious library
          function tryMethod3() {
            console.log('Trying QRious...');
            const container = document.getElementById('qrcode-canvas');
            
            if (typeof QRious !== 'undefined') {
              try {
                container.innerHTML = '<canvas id="qr-canvas-2"></canvas>';
                const canvas = document.getElementById('qr-canvas-2');
                
                const qr = new QRious({
                  element: canvas,
                  value: qrCodeData,
                  size: 350,
                  level: 'M'
                });
                
                console.log('‚úÖ QRious success!');
                return;
              } catch (error) {
                console.error('QRious failed:', error);
              }
            }
            
            tryMethod4();
          }
          
          // Method 4: Google Charts API fallback
          function tryMethod4() {
            console.log('Trying Google Charts API...');
            const container = document.getElementById('qrcode-canvas');
            
            try {
              const encodedData = encodeURIComponent(qrCodeData);
              const googleQRUrl = 'https://api.qrserver.com/v1/create-qr-code/?size=350x350&data=' + encodedData;
              
              container.innerHTML = '<img src="' + googleQRUrl + '" alt="QR Code" style="max-width: 350px; height: auto;" onerror="showFallback()">';
              console.log('‚úÖ Google Charts API used!');
            } catch (error) {
              console.error('Google Charts API failed:', error);
              showFallback();
            }
          }
          
          function showFallback() {
            console.log('All methods failed, showing fallback');
            const container = document.getElementById('qrcode-canvas');
            const fallback = document.getElementById('qrcode-fallback');
            
            container.innerHTML = '<p style="color: red;">‚ùå QR Code rendering failed</p>';
            fallback.style.display = 'block';
          }
          
          // Start rendering process
          console.log('Starting QR code rendering...');
          renderQRCode();
          
          // Auto-refresh every 30 seconds to get new QR codes
          setInterval(() => {
            console.log('Auto-refreshing for new QR code...');
            location.reload();
          }, 30000);
        </script>
      </body>
    </html>
  `);
});

// Start Express server IMMEDIATELY for health checks
const server = app.listen(PORT, '0.0.0.0', () => {
  console.log(`üåê EXPRESS SERVER RUNNING ON PORT ${PORT}`);
  console.log(`üìä Health check: Available at /health`);
  console.log(`‚úÖ Railway health checks should now pass!`);
});

// Import services with error handling
let stockService, enhancedSentimentService, alertService;

try {
  console.log('üì¶ Loading service modules...');
  
  // Load each service individually with specific error handling
  try {
    stockService = require('./services/stockService');
    console.log('‚úÖ Stock service loaded successfully');
  } catch (stockError) {
    console.error('‚ùå Stock service loading failed:', stockError.message);
    console.error('üìù Stock service error details:', stockError.stack);
    stockService = null;
  }
  
  try {
    enhancedSentimentService = require('./services/enhancedSentimentService');
    console.log('‚úÖ Enhanced sentiment service loaded successfully');
  } catch (sentimentError) {
    console.error('‚ùå Enhanced sentiment service loading failed:', sentimentError.message);
    console.error('üìù Sentiment service error details:', sentimentError.stack);
    enhancedSentimentService = null;
  }
  
  try {
    alertService = require('./services/alertService');
    console.log('‚úÖ Alert service loaded successfully');
  } catch (alertError) {
    console.error('‚ùå Alert service loading failed:', alertError.message);
    console.error('üìù Alert service error details:', alertError.stack);
    alertService = null;
  }
  
  // Summary of loaded services
  const loadedServices = [];
  if (stockService) loadedServices.push('Stock Service');
  if (enhancedSentimentService) loadedServices.push('Sentiment Service');
  if (alertService) loadedServices.push('Alert Service');
  
  if (loadedServices.length > 0) {
    console.log(`üéâ Successfully loaded ${loadedServices.length}/3 services: ${loadedServices.join(', ')}`);
  } else {
    console.log('‚ùå NO SERVICES LOADED - Bot will run in basic mode');
  }
  
} catch (error) {
  console.error('‚ùå CRITICAL SERVICE LOADING ERROR:', error.message);
  console.error('üìù Stack:', error.stack);
  console.log('üîß Bot will continue without services - basic functionality only');
  
  // Set all services to null
  stockService = null;
  enhancedSentimentService = null;
  alertService = null;
}

const client = new Client({
  authStrategy: new LocalAuth({
    dataPath: config.SESSION_PATH
  }),
  puppeteer: {
    headless: config.PUPPETEER_HEADLESS,
    args: [
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-dev-shm-usage',
      '--disable-accelerated-2d-canvas',
      '--no-first-run',
      '--no-zygote',
      '--single-process',
      '--disable-gpu',
      '--disable-web-security',
      '--disable-features=VizDisplayCompositor',
      '--disable-background-timer-throttling',
      '--disable-backgrounding-occluded-windows',
      '--disable-renderer-backgrounding',
      '--disable-extensions',
      '--disable-plugins',
      '--disable-default-apps',
      '--disable-sync',
      '--metrics-recording-only',
      '--no-default-browser-check',
      '--mute-audio',
      '--hide-scrollbars',
      '--disable-logging',
      '--disable-gl-drawing-for-tests',
      '--disable-ipc-flooding-protection',
      '--disable-hang-monitor',
      '--disable-prompt-on-repost',
      '--disable-domain-reliability',
      '--disable-component-extensions-with-background-pages',
      '--disable-background-networking',
      '--disable-breakpad',
      '--disable-client-side-phishing-detection',
      '--disable-component-update',
      '--disable-field-trial-config',
      '--disable-back-forward-cache',
      '--enable-features=NetworkService,NetworkServiceInProcess',
      '--force-color-profile=srgb',
      '--disable-features=TranslateUI',
      '--disable-blink-features=AutomationControlled'
    ],
    executablePath: '/usr/bin/google-chrome-stable'
  }
});

let botResponses = new Set(); // Track bot responses to avoid loops

client.on('qr', (qr) => {
  // Store QR code for web endpoint
  currentQRCode = qr;
  
  console.log('\nüéØ QR CODE GENERATED!');
  console.log('üì± SCAN QR CODE WITH YOUR BOT WHATSAPP ACCOUNT:');
  console.log('================================================');
  
  // Generate smaller QR code for logs
  qrcode.generate(qr, { small: true });
  
  console.log('================================================');
  console.log('');
  console.log('üåê BETTER QR CODE VIEWING:');
  console.log('üëâ Visit: https://YOUR-RAILWAY-APP-URL/qr');
  console.log('üì± Scan the QR code from that webpage instead!');
  console.log('');
  console.log('üìã INSTRUCTIONS:');
  console.log('1. Use your DEDICATED BOT WhatsApp account');
  console.log('2. Open WhatsApp on your phone');
  console.log('3. Go to Settings > Linked Devices');
  console.log('4. Tap "Link a Device"');
  console.log('5. Scan the QR code from the webpage above');
  console.log('================================================\n');
});

client.on('authenticated', () => {
  console.log('‚úÖ WHATSAPP AUTHENTICATION SUCCESSFUL!');
  console.log('üéâ Bot account connected!');
});

client.on('ready', () => {
  console.log('\nüöÄ FENTRIX STOCK BOT IS NOW LIVE ON RAILWAY!');
  console.log('==========================================');
  console.log('üìà Real stock/crypto data: ‚úÖ');
  console.log('üåê Professional sentiment analysis: ‚úÖ');
  console.log('üì∞ Real-time news integration: ‚úÖ');
  console.log('üìä Fear & Greed Index: ‚úÖ');
  console.log('üé® Clean professional responses: ‚úÖ');
  console.log('üö® Price alerts + monitoring: ‚úÖ');
  console.log('üìä LIVE price monitoring (15s): ‚úÖ');
  console.log('üîÑ Continuous background monitoring: ‚úÖ');
  console.log('üë• Group mode: ‚úÖ Everyone can use commands!');
  console.log('ü§ñ Powered by Fentrix.Ai: ‚úÖ');
  console.log('==========================================');
  console.log('üî• ALL FEATURES OPERATIONAL - BOT IS LIVE!');
  console.log('üìù Test with: !test');
  console.log('üöÄ Add bot to WhatsApp groups and start trading!');
  console.log('==========================================\n');
  
  // Set the bot client for alert service notifications
  if (alertService) {
    try {
      alertService.setBotClient(client);
      console.log('‚úÖ Alert service connected to bot client');
    } catch (error) {
      console.error('‚ùå Alert service connection failed:', error.message);
    }
  }
  
  // Start continuous price monitoring for alerts
  if (alertService && stockService) {
    try {
      console.log('üîÑ Starting continuous price monitoring...');
      alertService.startMonitoring(stockService);
      console.log('‚úÖ Price monitoring started - 15 second intervals');
    } catch (error) {
      console.error('‚ùå Price monitoring startup failed:', error.message);
    }
  } else {
    console.log('‚ö†Ô∏è Price monitoring not started - services not available');
  }
});

client.on('disconnected', (reason) => {
  console.log('‚ùå WhatsApp Bot disconnected:', reason);
  console.log('üîÑ Attempting to reconnect...');
});

client.on('auth_failure', (msg) => {
  console.error('‚ùå WhatsApp Authentication failed:', msg);
  console.log('üí° Try restarting the deployment to get a new QR code');
});

// Listen for ALL messages from EVERYONE
client.on('message_create', async (msg) => {
  try {
    console.log('\nüìù MESSAGE DETECTED:');
    console.log(`üìÑ Body: "${msg.body}"`);
    console.log(`üì± From me: ${msg.fromMe}`);
    console.log(`üë§ From: ${msg.from}`);
    
    // Skip if this is a bot response (to avoid loops)
    if (botResponses.has(msg.id._serialized)) {
      console.log('üîÑ Bot response, skipping...');
      return;
    }
    
    // Process commands from ANYONE (not just you)
    if (msg.type === 'chat') {
      const text = msg.body.toLowerCase().trim();
      
      // Only process messages that start with ! (commands)
      if (text.startsWith('!')) {
        console.log('‚úÖ COMMAND DETECTED FROM ANYONE!');
        console.log(`üîç Processing command: "${text}"`);
        
        // Test command
        if (text.includes('!test')) {
          console.log('üéØ TEST COMMAND');
          await sendBotResponse(msg, 'üéâ *FENTRIX STOCK BOT OPERATIONAL ON RAILWAY!* üöÄ\n\nüìà Real stock/crypto prices: ‚úÖ\nüåê Professional sentiment analysis: ‚úÖ\nüì∞ Real-time news integration: ‚úÖ\nüìä Fear & Greed Index: ‚úÖ\nüé® Clean professional responses: ‚úÖ\nüö® Price alerts + LIVE monitoring (15s): ‚úÖ\nüìä Continuous background monitoring: ‚úÖ\nüë• Group mode: Everyone can use commands ‚úÖ\nü§ñ Powered by Fentrix.Ai: ‚úÖ\nüåê 24/7 Railway cloud hosting: ‚úÖ\n\nüî• *ALL FEATURES OPERATIONAL!*\n\nTry: !stock AAPL or !alert bitcoin $45000\n\nü§ñ Fentrix.Ai Professional Trading Bot');
        }
        
        // Debug command - ENHANCED TROUBLESHOOTING
        else if (text.includes('!debug')) {
          console.log('üîß DEBUG COMMAND');
          
          try {
            let debugInfo = 'üîß *DEBUG INFORMATION* üõ†Ô∏è\n\n';
            
            // Service status with detailed checks
            debugInfo += 'üìä *SERVICE STATUS:*\n';
            debugInfo += `‚Ä¢ Stock Service: ${stockService ? '‚úÖ Loaded' : '‚ùå Failed'}\n`;
            debugInfo += `‚Ä¢ Sentiment Service: ${enhancedSentimentService ? '‚úÖ Loaded' : '‚ùå Failed'}\n`;
            debugInfo += `‚Ä¢ Alert Service: ${alertService ? '‚úÖ Loaded' : '‚ùå Failed'}\n\n`;
            
            // Service functionality tests
            if (stockService) {
              debugInfo += 'üß™ *SERVICE FUNCTIONALITY:*\n';
              try {
                debugInfo += `‚Ä¢ Stock API: Testing...\n`;
                debugInfo += `‚Ä¢ Crypto API: Testing...\n`;
                debugInfo += `‚Ä¢ Alert monitoring: ${alertService?.isMonitoring ? 'üü¢ Active' : 'üî¥ Inactive'}\n\n`;
              } catch (error) {
                debugInfo += `‚Ä¢ API Tests: ‚ùå Failed to test\n\n`;
              }
            }
            
            // Configuration status
            debugInfo += '‚öôÔ∏è *CONFIGURATION:*\n';
            debugInfo += `‚Ä¢ Alpha Vantage Key: ${config.ALPHA_VANTAGE_API_KEY ? '‚úÖ Set' : '‚ùå Missing'}\n`;
            debugInfo += `‚Ä¢ DeepSeek Key: ${config.DEEPSEEK_API_KEY ? '‚úÖ Set' : '‚ùå Missing'}\n`;
            debugInfo += `‚Ä¢ Stock API: ${config.STOCK_API_BASE ? '‚úÖ Set' : '‚ùå Missing'}\n`;
            debugInfo += `‚Ä¢ Crypto API: ${config.CRYPTO_API_BASE ? '‚úÖ Set' : '‚ùå Missing'}\n\n`;
            
            // Environment
            debugInfo += 'üåê *ENVIRONMENT:*\n';
            debugInfo += `‚Ä¢ Node.js: ${process.version}\n`;
            debugInfo += `‚Ä¢ Environment: ${config.NODE_ENV}\n`;
            debugInfo += `‚Ä¢ Port: ${config.PORT}\n`;
            debugInfo += `‚Ä¢ Uptime: ${Math.floor(process.uptime())} seconds\n\n`;
            
            // Alert service status
            if (alertService) {
              const alertStatus = alertService.getStatus();
              debugInfo += 'üö® *ALERT SERVICE:*\n';
              debugInfo += `‚Ä¢ Total Active Alerts: ${alertStatus.totalAlerts}\n`;
              debugInfo += `‚Ä¢ Monitoring Active: ${alertStatus.isMonitoring ? '‚úÖ Yes' : '‚ùå No'}\n`;
              debugInfo += `‚Ä¢ Check Interval: ${alertStatus.checkInterval / 1000}s\n`;
              debugInfo += `‚Ä¢ Bot Client Connected: ${alertStatus.botClientConnected ? '‚úÖ Yes' : '‚ùå No'}\n\n`;
            }
            
            debugInfo += 'üí° *QUICK TESTS:*\n';
            debugInfo += 'üìà !stock AAPL - Test stock data\n';
            debugInfo += 'ü™ô !crypto bitcoin - Test crypto data\n';
            debugInfo += 'üö® !alert AAPL $190.00 - Test alerts\n';
            debugInfo += 'üß† !sentiment AAPL - Test sentiment\n\n';
            debugInfo += 'ü§ñ *Powered by Fentrix.Ai*';
            
            await sendBotResponse(msg, debugInfo);
            
            // Also run a quick API test in the background and report results
            if (stockService) {
              setTimeout(async () => {
                try {
                  console.log('üß™ Running background API tests...');
                  const testResults = await stockService.testService();
                  
                  let testReport = 'üß™ *API TEST RESULTS* üìä\n\n';
                  testReport += `üìà *Stock API:* ${testResults.stockTest ? '‚úÖ Working' : '‚ùå Failed'}\n`;
                  if (testResults.stockError) {
                    testReport += `   Error: ${testResults.stockError}\n`;
                  }
                  testReport += `ü™ô *Crypto API:* ${testResults.cryptoTest ? '‚úÖ Working' : '‚ùå Failed'}\n`;
                  if (testResults.cryptoError) {
                    testReport += `   Error: ${testResults.cryptoError}\n`;
                  }
                  testReport += '\nü§ñ *Powered by Fentrix.Ai*';
                  
                  await sendBotResponse(msg, testReport);
                  console.log('‚úÖ Background API tests completed');
                } catch (error) {
                  console.log('‚ùå Background API tests failed:', error.message);
                }
              }, 2000);
            }
            
          } catch (error) {
            console.error('‚ùå Debug command failed:', error.message);
            await sendBotResponse(msg, `‚ùå Debug command failed: ${error.message}\n\nü§ñ Powered by Fentrix.Ai`);
          }
        }
        
        // Stock commands
        else if (text.startsWith('!stock ') || text.startsWith('!s ')) {
          console.log(`üìà STOCK COMMAND DETECTED - Service status: ${stockService ? 'Available' : 'Not Available'}`);
          
          if (!stockService) {
            await sendBotResponse(msg, '‚ùå Stock service not available. Try !debug to see what\'s wrong.\n\nüîß This might be due to:\n‚Ä¢ Missing API keys\n‚Ä¢ Service loading errors\n‚Ä¢ Network issues\n\nüí° Try again in a few moments or contact support.');
            return;
          }
          
          const symbol = text.replace('!stock ', '').replace('!s ', '').toUpperCase().trim();
          console.log(`üìà FETCHING STOCK: ${symbol}`);
          
          try {
            await sendBotResponse(msg, `üîÑ Fetching ${symbol} stock data...\nüìä Getting real-time prices...\nPlease wait...`);
            
            const stockData = await stockService.getStockPrice(symbol);
            const formattedPrice = stockService.formatPriceDisplay(stockData, 'stock');
            
            console.log(`‚úÖ Stock data retrieved for ${symbol}`);
            await sendBotResponse(msg, formattedPrice);
            
            // Auto-sentiment for significant changes
            if (enhancedSentimentService && Math.abs(stockData.changePercent) > 2) {
              console.log(`üß† Auto-sentiment triggered for ${symbol} (${stockData.changePercent}% change)`);
              await sendBotResponse(msg, 'üåê Analyzing market sentiment with professional AI...\nüì∞ Fetching latest news...\nüìä Getting Fear & Greed Index...\nPlease wait...');
              
              try {
                const sentiment = await enhancedSentimentService.getEnhancedMarketSentiment(symbol, stockData);
                const formattedSentiment = enhancedSentimentService.formatEnhancedSentimentDisplay(sentiment);
                await sendBotResponse(msg, formattedSentiment);
                console.log('‚úÖ ENHANCED SENTIMENT ANALYSIS SUCCESSFUL!');
              } catch (sentimentError) {
                console.log('‚ùå Enhanced sentiment analysis failed:', sentimentError.message);
                await sendBotResponse(msg, `‚ö†Ô∏è Sentiment analysis temporarily unavailable: ${sentimentError.message}`);
              }
            }
            
          } catch (error) {
            console.log(`‚ùå Stock fetch failed: ${error.message}`);
            await sendBotResponse(msg, `‚ùå Could not fetch stock data for ${symbol}\n\nError: ${error.message}\n\nüí° Try: AAPL, GOOGL, TSLA, MSFT`);
          }
        }
        
        // Crypto commands  
        else if (text.startsWith('!crypto ') || text.startsWith('!c ')) {
          if (!stockService) {
            await sendBotResponse(msg, '‚ùå Crypto service not available. Please try again later.');
            return;
          }
          
          const coin = text.replace('!crypto ', '').replace('!c ', '').toLowerCase().trim();
          console.log(`ü™ô FETCHING CRYPTO: ${coin}`);
          
          try {
            await sendBotResponse(msg, `üîÑ Fetching ${coin} crypto data...\nüìä Getting real-time prices...\nPlease wait...`);
            
            const cryptoData = await stockService.getCryptoPrice(coin);
            const formattedPrice = stockService.formatPriceDisplay(cryptoData, 'crypto');
            
            console.log(`‚úÖ Crypto data retrieved for ${coin}`);
            await sendBotResponse(msg, formattedPrice);
            
            // Auto-sentiment for significant changes
            if (enhancedSentimentService && Math.abs(cryptoData.change24h) > 5) {
              console.log(`üß† Auto-sentiment triggered for ${coin} (${cryptoData.change24h}% change)`);
              await sendBotResponse(msg, 'üåê Analyzing crypto sentiment with professional AI...\nüì∞ Fetching latest crypto news...\nüìä Getting Fear & Greed Index...\nPlease wait...');
              
              try {
                const sentiment = await enhancedSentimentService.getEnhancedMarketSentiment(coin.toUpperCase(), cryptoData);
                const formattedSentiment = enhancedSentimentService.formatEnhancedSentimentDisplay(sentiment);
                await sendBotResponse(msg, formattedSentiment);
                console.log('‚úÖ ENHANCED CRYPTO SENTIMENT ANALYSIS SUCCESSFUL!');
              } catch (sentimentError) {
                console.log('‚ùå Enhanced sentiment analysis failed:', sentimentError.message);
                await sendBotResponse(msg, `‚ö†Ô∏è Sentiment analysis temporarily unavailable: ${sentimentError.message}`);
              }
            }
            
          } catch (error) {
            console.log(`‚ùå Crypto fetch failed: ${error.message}`);
            await sendBotResponse(msg, `‚ùå Could not fetch crypto data for ${coin}\n\nError: ${error.message}\n\nüí° Try: bitcoin, ethereum, dogecoin, solana`);
          }
        }
        
        // Alert commands - FIXED FUNCTIONALITY
        else if (text.startsWith('!alert ')) {
          if (!alertService) {
            await sendBotResponse(msg, '‚ùå Alert service not available. Please try again later.');
            return;
          }
          
          console.log(`üö® PROCESSING ALERT COMMAND: "${text}"`);
          
          try {
            await sendBotResponse(msg, 'üîÑ Setting up price alert...\nüìä Fetching current price...\nüéØ Analyzing target price...\nPlease wait...');
            
            // Get user info for the alert
            const contact = await msg.getContact();
            const userName = contact.name || contact.pushname || 'User';
            
            // Use the new alert service interface
            const result = await alertService.addAlert(text, msg.from, msg.author || msg.from, userName);
            console.log(`‚úÖ Alert result: ${result.success}`);
            
            if (result.success) {
              await sendBotResponse(msg, result.message);
            } else {
              await sendBotResponse(msg, result.message);
            }
            
          } catch (error) {
            console.log(`‚ùå Alert setup failed: ${error.message}`);
            await sendBotResponse(msg, `‚ùå Could not set up alert: ${error.message}\n\nüí° Examples:\nüö® !alert AAPL $187.50\nüö® !alert bitcoin $45000\nüö® !alert TSLA $200.00\n\nü§ñ Powered by Fentrix.Ai`);
          }
        }
        
        // Alerts list command - FIXED FUNCTIONALITY
        else if (text.includes('!alerts')) {
          if (!alertService) {
            await sendBotResponse(msg, '‚ùå Alert service not available. Please try again later.');
            return;
          }
          
          console.log('üìã LISTING ACTIVE ALERTS');
          
          try {
            // Get alerts for this specific chat
            const chatAlerts = alertService.getChatAlerts(msg.from);
            const totalAlerts = alertService.getActiveAlerts().length;
            
            console.log(`‚úÖ Found ${chatAlerts.length} alerts in this chat, ${totalAlerts} total`);
            
            if (chatAlerts.length === 0) {
              await sendBotResponse(msg, 'üìã *ACTIVE ALERTS IN THIS CHAT* üö®\n\n‚ùå No active alerts in this chat\n\nüí° Set an alert with:\nüö® !alert AAPL $187.50\nüö® !alert bitcoin $45000\nüö® !alert TSLA $200.00\n\nüîç Live monitoring active (15s intervals)\nü§ñ Powered by Fentrix.Ai');
            } else {
              let alertsText = `üìã *ACTIVE ALERTS IN THIS CHAT* üö®\n\n`;
              
              // Separate stocks and crypto for better display
              const stockAlerts = chatAlerts.filter(alert => alert.assetType === 'stock');
              const cryptoAlerts = chatAlerts.filter(alert => alert.assetType === 'crypto');

              if (stockAlerts.length > 0) {
                alertsText += `üìà *STOCKS (${stockAlerts.length}):*\n`;
                stockAlerts.forEach((alert, index) => {
                  const timeAgo = getTimeAgo(alert.createdAt);
                  const directionEmoji = alert.alertDirection === 'up' ? '‚¨ÜÔ∏è' : alert.alertDirection === 'down' ? '‚¨áÔ∏è' : 'üéØ';
                  alertsText += `${index + 1}. üìä *${alert.symbol}* - Target: $${alert.targetPrice.toLocaleString()} ${directionEmoji}\n`;
                  alertsText += `   üë§ By: ${alert.userName} | ‚è∞ ${timeAgo}\n\n`;
                });
              }

              if (cryptoAlerts.length > 0) {
                alertsText += `ü™ô *CRYPTO (${cryptoAlerts.length}):*\n`;
                cryptoAlerts.forEach((alert, index) => {
                  const timeAgo = getTimeAgo(alert.createdAt);
                  const directionEmoji = alert.alertDirection === 'up' ? '‚¨ÜÔ∏è' : alert.alertDirection === 'down' ? '‚¨áÔ∏è' : 'üéØ';
                  alertsText += `${index + 1}. ü™ô *${alert.symbol}* - Target: $${alert.targetPrice.toLocaleString()} ${directionEmoji}\n`;
                  alertsText += `   üë§ By: ${alert.userName} | ‚è∞ ${timeAgo}\n\n`;
                });
              }
              
              alertsText += `üîç *Live monitoring active* (15s intervals)\n`;
              alertsText += `üìä Total alerts across all chats: ${totalAlerts}\n`;
              alertsText += 'ü§ñ *Powered by Fentrix.Ai*';
              
              await sendBotResponse(msg, alertsText);
            }
            
          } catch (error) {
            console.log(`‚ùå Alerts list failed: ${error.message}`);
            await sendBotResponse(msg, `‚ùå Could not retrieve alerts: ${error.message}\n\nü§ñ Powered by Fentrix.Ai`);
          }
        }
        
        // Sentiment analysis commands - FIXED FUNCTIONALITY
        else if (text.startsWith('!sentiment')) {
          if (!enhancedSentimentService) {
            await sendBotResponse(msg, '‚ùå Sentiment analysis service not available. Please try again later.');
            return;
          }
          
          const sentimentText = text.replace('!sentiment', '').trim();
          console.log(`üß† SENTIMENT ANALYSIS REQUEST: "${sentimentText}"`);
          
          try {
            await sendBotResponse(msg, 'üåê Analyzing market sentiment with professional AI...\nüì∞ Fetching latest news and market data...\nüìä Getting Fear & Greed Index...\nPlease wait...');
            
            let sentiment;
            if (sentimentText) {
              // Specific symbol sentiment
              const symbol = sentimentText.toUpperCase();
              console.log(`üéØ Getting sentiment for specific symbol: ${symbol}`);
              
              // Try to get current price data for context
              let priceData = null;
              try {
                if (stockService) {
                  // Try as stock first
                  try {
                    priceData = await stockService.getStockPrice(symbol);
                    console.log(`‚úÖ Got stock price data for sentiment analysis: ${symbol}`);
                  } catch {
                    // Try as crypto if stock fails
                    priceData = await stockService.getCryptoPrice(symbol.toLowerCase());
                    console.log(`‚úÖ Got crypto price data for sentiment analysis: ${symbol}`);
                  }
                }
              } catch (priceError) {
                console.log(`‚ö†Ô∏è Could not fetch price data for ${symbol}: ${priceError.message}`);
              }
              
              sentiment = await enhancedSentimentService.getEnhancedMarketSentiment(symbol, priceData);
            } else {
              // General market sentiment
              console.log('üåê Getting general market sentiment');
              sentiment = await enhancedSentimentService.getEnhancedMarketSentiment();
            }
            
            const formattedSentiment = enhancedSentimentService.formatEnhancedSentimentDisplay(sentiment);
            await sendBotResponse(msg, formattedSentiment);
            console.log('‚úÖ ENHANCED SENTIMENT ANALYSIS SUCCESSFUL!');
            
          } catch (error) {
            console.log(`‚ùå Sentiment analysis failed: ${error.message}`);
            await sendBotResponse(msg, `‚ùå Sentiment analysis failed: ${error.message}\n\nüí° Examples:\nüß† !sentiment - General market sentiment\nüß† !sentiment AAPL - Apple sentiment\nüß† !sentiment bitcoin - Bitcoin sentiment\n\nü§ñ Powered by Fentrix.Ai`);
          }
        }
        
        // Help command
        else if (text.includes('!help')) {
          console.log('‚ùì HELP COMMAND');
          const helpText = `ü§ñ *FENTRIX STOCK BOT* üöÄ

üë• *EVERYONE CAN USE THESE COMMANDS:*

üìä *STOCK COMMANDS:*
‚Ä¢ !stock AAPL - Get Apple stock price + auto-sentiment
‚Ä¢ !s TSLA - Get Tesla stock (short command)

ü™ô *CRYPTO COMMANDS:*
‚Ä¢ !crypto bitcoin - Get Bitcoin price + auto-sentiment
‚Ä¢ !c ethereum - Get Ethereum (short command)

üö® *PRICE ALERT COMMANDS:*
‚Ä¢ !alert AAPL $187.50 - Set stock alert with LIVE monitoring
‚Ä¢ !alert bitcoin $45000 - Set crypto alert with LIVE monitoring
‚Ä¢ !alerts - List all active alerts

üß† *PROFESSIONAL SENTIMENT COMMANDS:*
‚Ä¢ !sentiment - General market sentiment with web data
‚Ä¢ !sentiment AAPL - Professional sentiment for specific stock

‚ùì *OTHER COMMANDS:*
‚Ä¢ !help - Show this help
‚Ä¢ !test - Test bot functionality

üî• *ENHANCED FEATURES:*
‚úÖ Real-time stock/crypto prices
‚úÖ Professional sentiment analysis
‚úÖ Real-time news integration
‚úÖ Clean professional responses
‚úÖ Price alerts with LIVE monitoring
‚úÖ Group mode - anyone can use
‚úÖ 24/7 Railway cloud hosting
‚úÖ Powered by Fentrix.Ai

üí° *Examples:*
üìà !stock AAPL
ü™ô !crypto bitcoin
üö® !alert bitcoin $45000

üë• Anyone in this group can use ALL commands!
ü§ñ Powered by Fentrix.Ai - Professional market analysis!`;

          await sendBotResponse(msg, helpText);
        }
        
        // Unknown command
        else {
          console.log('‚ùì Unknown command');
          await sendBotResponse(msg, `‚ùì Unknown command: "${text}"\n\nüìù Type !help to see available commands\n\nüí° Examples:\nüìà !stock AAPL\nü™ô !crypto bitcoin\nüö® !alert bitcoin $45000\n\nü§ñ Powered by Fentrix.Ai`);
        }
      } else {
        // Regular message (not a command)
        console.log('üìù Regular message (not a command)');
      }
    } else {
      console.log('üì± Non-chat message type');
    }
  } catch (error) {
    console.error('‚ùå Message handling error:', error);
    try {
      await sendBotResponse(msg, '‚ùå Sorry, I encountered an error processing your request. Please try again later.');
    } catch (responseError) {
      console.error('‚ùå Could not send error response:', responseError);
    }
  }
});

// Helper function to calculate time ago
function getTimeAgo(date) {
  const now = new Date();
  const diff = now - date;
  const minutes = Math.floor(diff / 60000);
  const hours = Math.floor(minutes / 60);
  const days = Math.floor(hours / 24);

  if (days > 0) return `${days}d ago`;
  if (hours > 0) return `${hours}h ago`;
  if (minutes > 0) return `${minutes}m ago`;
  return 'Just now';
}

// Function to send bot responses
async function sendBotResponse(originalMsg, responseText) {
  try {
    console.log('ü§ñ SENDING RESPONSE...');
    
    // Send response to the same chat
    const chat = await originalMsg.getChat();
    const sentMsg = await chat.sendMessage(responseText);
    
    // Track this as a bot response to avoid processing it again
    botResponses.add(sentMsg.id._serialized);
    
    console.log('‚úÖ RESPONSE SENT!');
    console.log(`üì§ Response: "${responseText.substring(0, 50)}..."`);
    
    // Clean up old response IDs after 1 minute
    setTimeout(() => {
      botResponses.delete(sentMsg.id._serialized);
    }, 60000);
    
  } catch (error) {
    console.log('‚ùå Response failed:', error.message);
  }
}

// Graceful shutdown handling for cloud deployment
process.on('SIGINT', () => {
  console.log('üì¥ Shutting down bot gracefully...');
  client.destroy();
  server.close();
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('üì¥ Received SIGTERM, shutting down gracefully...');
  client.destroy();
  server.close();
  process.exit(0);
});

// Error handling
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå Uncaught Exception:', error);
});

// Initialize WhatsApp client with enhanced error handling and debugging
console.log('üöÄ Initializing WhatsApp client...');
console.log('üì± Preparing to generate QR code...');
console.log('üîç Chrome executable path:', '/usr/bin/google-chrome-stable');
console.log('üê≥ Running in Docker container with Puppeteer image');

// Add timeout and retry logic
let initializationAttempts = 0;
const maxAttempts = 3;

function initializeClient() {
  initializationAttempts++;
  console.log(`üîÑ Initialization attempt ${initializationAttempts}/${maxAttempts}`);
  console.log('‚öôÔ∏è  Puppeteer configuration: headless mode, optimized Chrome args');
  
  try {
    client.initialize()
      .then(() => {
        console.log('‚úÖ WhatsApp client initialization started successfully');
        console.log('üì≤ QR code should appear in logs shortly...');
      })
      .catch((error) => {
        console.error('‚ùå WhatsApp client initialization failed:', error.message);
        console.error('üîç Error details:', error);
        
        if (error.message.includes('Protocol error') || error.message.includes('Target closed')) {
          console.log('üêõ Chrome protocol error detected - this usually means Chrome crashed');
          console.log('üîß Trying with different Chrome configuration...');
        }
        
        if (initializationAttempts < maxAttempts) {
          console.log(`üîÑ Retrying in 15 seconds... (Attempt ${initializationAttempts + 1}/${maxAttempts})`);
          setTimeout(initializeClient, 15000);
        } else {
          console.error('üí• Maximum initialization attempts reached.');
          console.log('üåê Express server and health checks will remain operational');
          console.log('üìä Stock/crypto data fetching will work without WhatsApp');
          console.log('üí° Bot will continue with API-only functionality');
          console.log('üîß You can still test: !stock AAPL or !crypto bitcoin via health endpoint');
        }
      });
  } catch (error) {
    console.error('‚ùå WhatsApp client initialization error:', error);
    console.error('üîç Stack trace:', error.stack);
    
    if (initializationAttempts < maxAttempts) {
      console.log(`üîÑ Retrying in 15 seconds... (Attempt ${initializationAttempts + 1}/${maxAttempts})`);
      setTimeout(initializeClient, 15000);
    } else {
      console.error('üí• Maximum initialization attempts reached.');
      console.log('üåê Bot will continue with API-only functionality');
    }
  }
}

// Start initialization
initializeClient();

console.log('\nüìã FENTRIX STOCK BOT - RAILWAY DEPLOYMENT');
console.log('üåê Express server: ‚úÖ Running');
console.log('üì± WhatsApp client: üîÑ Initializing with Puppeteer Docker image...');
console.log('üîç Watch logs for QR code...');
console.log('üí° If Chrome issues persist, bot will run with API-only functionality');
console.log('ü§ñ Professional market analysis bot powered by Fentrix.Ai');
console.log('üöÄ DEPLOYMENT SUCCESSFUL!\n'); 
