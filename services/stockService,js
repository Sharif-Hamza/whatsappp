const axios = require('axios');

// Try to load config with error handling
let config;
try {
  config = require('../config');
  console.log('‚úÖ Config loaded in stockService');
} catch (error) {
  console.error('‚ùå Config loading failed in stockService:', error.message);
  // Fallback config
  config = {
    ALPHA_VANTAGE_API_KEY: process.env.ALPHA_VANTAGE_API_KEY || '18PO9ZL6HV4F00C6',
    STOCK_API_BASE: 'https://www.alphavantage.co/query',
    CRYPTO_API_BASE: 'https://api.coingecko.com/api/v3',
    FINANCIAL_MODELING_PREP_API_KEY: process.env.FINANCIAL_MODELING_PREP_API_KEY || ''
  };
}

class StockService {
  constructor() {
    try {
      this.alphaVantageKey = config.ALPHA_VANTAGE_API_KEY;
      this.fmpKey = config.FINANCIAL_MODELING_PREP_API_KEY;
      
      console.log('üìà StockService initialized');
      console.log(`üìä Alpha Vantage Key: ${this.alphaVantageKey ? 'Set' : 'Missing'}`);
      console.log(`üåê Stock API Base: ${config.STOCK_API_BASE}`);
      console.log(`ü™ô Crypto API Base: ${config.CRYPTO_API_BASE}`);
      
      if (!this.alphaVantageKey) {
        console.warn('‚ö†Ô∏è Alpha Vantage API key not found - stock data may be limited');
      }
      
    } catch (error) {
      console.error('‚ùå StockService constructor failed:', error.message);
      throw error;
    }
  }

  /**
   * Get stock price and basic info
   * @param {string} symbol - Stock symbol (e.g., 'AAPL', 'GOOGL')
   * @returns {Promise<Object>} Stock data
   */
  async getStockPrice(symbol) {
    try {
      console.log(`üìà Fetching stock data for: ${symbol}`);
      
      if (!this.alphaVantageKey) {
        throw new Error('Alpha Vantage API key not configured');
      }

      // Using Alpha Vantage for real-time stock data
      const response = await axios.get(config.STOCK_API_BASE, {
        params: {
          function: 'GLOBAL_QUOTE',
          symbol: symbol.toUpperCase(),
          apikey: this.alphaVantageKey
        },
        timeout: 15000 // 15 second timeout
      });

      console.log(`üìä API Response status: ${response.status}`);
      
      if (!response.data) {
        throw new Error('No data received from Alpha Vantage');
      }

      const data = response.data['Global Quote'];
      
      if (!data || Object.keys(data).length === 0) {
        console.log('‚ùå Empty data response:', response.data);
        throw new Error(`Stock symbol "${symbol}" not found or API limit reached`);
      }

      const price = parseFloat(data['05. price']);
      const change = parseFloat(data['09. change']);
      const changePercent = data['10. change percent'].replace('%', '');

      const result = {
        symbol: data['01. symbol'],
        price: price,
        change: change,
        changePercent: parseFloat(changePercent),
        lastUpdated: data['07. latest trading day'],
        currency: 'USD'
      };

      console.log(`‚úÖ Stock data retrieved: ${symbol} = $${price}`);
      return result;
      
    } catch (error) {
      console.error(`‚ùå Stock price fetch error for ${symbol}:`, error.message);
      
      // Provide helpful error messages
      if (error.message.includes('timeout')) {
        throw new Error(`Request timeout for ${symbol} - API may be slow`);
      } else if (error.message.includes('404') || error.message.includes('not found')) {
        throw new Error(`Stock symbol "${symbol}" not found`);
      } else if (error.message.includes('API limit') || error.message.includes('rate limit')) {
        throw new Error(`API rate limit exceeded - try again in a moment`);
      } else {
        throw new Error(`Failed to fetch stock price for ${symbol}: ${error.message}`);
      }
    }
  }

  /**
   * Get cryptocurrency price
   * @param {string} coinId - Crypto coin ID (e.g., 'bitcoin', 'ethereum')
   * @returns {Promise<Object>} Crypto data
   */
  async getCryptoPrice(coinId) {
    try {
      console.log(`ü™ô Fetching crypto data for: ${coinId}`);
      
      // Using CoinGecko API (free tier, no API key required)
      const response = await axios.get(`${config.CRYPTO_API_BASE}/simple/price`, {
        params: {
          ids: coinId.toLowerCase(),
          vs_currencies: 'usd',
          include_24hr_change: true,
          include_market_cap: true,
          include_24hr_vol: true
        },
        timeout: 15000 // 15 second timeout
      });

      console.log(`üìä Crypto API Response status: ${response.status}`);

      if (!response.data) {
        throw new Error('No data received from CoinGecko');
      }

      const data = response.data[coinId.toLowerCase()];
      
      if (!data) {
        console.log('‚ùå Crypto not found:', coinId);
        console.log('Available data keys:', Object.keys(response.data));
        throw new Error(`Cryptocurrency "${coinId}" not found`);
      }

      const result = {
        symbol: coinId.toUpperCase(),
        price: data.usd,
        change24h: data.usd_24h_change || 0,
        marketCap: data.usd_market_cap || 0,
        volume24h: data.usd_24h_vol || 0,
        currency: 'USD'
      };

      console.log(`‚úÖ Crypto data retrieved: ${coinId} = $${data.usd}`);
      return result;
      
    } catch (error) {
      console.error(`‚ùå Crypto price fetch error for ${coinId}:`, error.message);
      
      // Provide helpful error messages
      if (error.message.includes('timeout')) {
        throw new Error(`Request timeout for ${coinId} - API may be slow`);
      } else if (error.message.includes('404') || error.message.includes('not found')) {
        throw new Error(`Cryptocurrency "${coinId}" not found`);
      } else {
        throw new Error(`Failed to fetch crypto price for ${coinId}: ${error.message}`);
      }
    }
  }

  /**
   * Search for stock/crypto symbols
   * @param {string} query - Search query
   * @returns {Promise<Array>} Array of matching symbols
   */
  async searchSymbols(query) {
    try {
      console.log(`üîç Searching symbols for: ${query}`);
      
      if (!this.alphaVantageKey) {
        console.warn('‚ö†Ô∏è Cannot search symbols - Alpha Vantage API key not configured');
        return [];
      }

      // Search stocks using Alpha Vantage
      const stockResponse = await axios.get(config.STOCK_API_BASE, {
        params: {
          function: 'SYMBOL_SEARCH',
          keywords: query,
          apikey: this.alphaVantageKey
        },
        timeout: 10000
      });

      const stockMatches = stockResponse.data.bestMatches || [];
      
      return stockMatches.slice(0, 5).map(match => ({
        symbol: match['1. symbol'],
        name: match['2. name'],
        type: 'stock',
        region: match['4. region']
      }));
    } catch (error) {
      console.error('‚ùå Symbol search error:', error.message);
      return [];
    }
  }

  /**
   * Format price display
   * @param {Object} priceData - Price data object
   * @param {string} type - 'stock' or 'crypto'
   * @returns {string} Formatted price message
   */
  formatPriceDisplay(priceData, type = 'stock') {
    try {
      const { symbol, price, change, changePercent, change24h, lastUpdated, marketCap, volume24h } = priceData;
      
      let emoji = 'üìà';
      let changeValue = type === 'stock' ? change : change24h;
      let changePercentValue = type === 'stock' ? changePercent : change24h;
      
      if (changeValue < 0) {
        emoji = 'üìâ';
      } else if (changeValue === 0) {
        emoji = '‚û°Ô∏è';
      }

      const formattedPrice = `$${price.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 6 })}`;
      const formattedChange = changeValue >= 0 ? `+${changeValue.toFixed(2)}` : changeValue.toFixed(2);
      const formattedChangePercent = changePercentValue >= 0 ? `+${changePercentValue.toFixed(2)}%` : `${changePercentValue.toFixed(2)}%`;

      let message = `${emoji} *${symbol}* ${type === 'crypto' ? 'ü™ô' : 'üìà'}\n`;
      message += `üí∞ *Price:* ${formattedPrice}\n`;
      message += `üìä *Change:* ${formattedChange} (${formattedChangePercent})\n`;
      
      if (type === 'crypto') {
        if (marketCap > 0) {
          message += `üè™ *Market Cap:* $${(marketCap / 1e9).toFixed(2)}B\n`;
        }
        if (volume24h > 0) {
          message += `üìà *24h Volume:* $${(volume24h / 1e6).toFixed(2)}M\n`;
        }
      } else {
        message += `üìÖ *Last Updated:* ${lastUpdated}\n`;
      }
      
      message += `‚è∞ *Time:* ${new Date().toLocaleString()}\n`;
      message += `ü§ñ *Powered by Fentrix.Ai*`;
      
      return message;
    } catch (error) {
      console.error('‚ùå Price formatting error:', error.message);
      return `‚ùå Error formatting price data for ${priceData?.symbol || 'unknown symbol'}`;
    }
  }

  /**
   * Test service functionality
   * @returns {Promise<Object>} Test results
   */
  async testService() {
    console.log('üß™ Testing StockService...');
    
    const results = {
      stockTest: false,
      cryptoTest: false,
      stockError: null,
      cryptoError: null
    };

    // Test stock API
    try {
      console.log('üìà Testing stock API with AAPL...');
      const stockData = await this.getStockPrice('AAPL');
      results.stockTest = stockData && stockData.price > 0;
      console.log('‚úÖ Stock test passed');
    } catch (error) {
      results.stockError = error.message;
      console.log('‚ùå Stock test failed:', error.message);
    }

    // Test crypto API
    try {
      console.log('ü™ô Testing crypto API with bitcoin...');
      const cryptoData = await this.getCryptoPrice('bitcoin');
      results.cryptoTest = cryptoData && cryptoData.price > 0;
      console.log('‚úÖ Crypto test passed');
    } catch (error) {
      results.cryptoError = error.message;
      console.log('‚ùå Crypto test failed:', error.message);
    }

    return results;
  }
}

// Export singleton instance
const stockServiceInstance = new StockService();

// Test the service on startup
stockServiceInstance.testService()
  .then(results => {
    console.log('üß™ StockService test results:', results);
  })
  .catch(error => {
    console.error('‚ùå StockService test failed:', error.message);
  });

module.exports = stockServiceInstance; 
